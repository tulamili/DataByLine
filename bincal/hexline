#!/usr/bin/perl

use 5.001 ; use strict ; use warnings ; 
use Getopt::Std ; getopts ':ac:lu1' , \my %o ; 
use Term::ANSIColor qw[ color :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use Encode qw[ decode_utf8 ] ;
binmode STDOUT, ":utf8" if $o{u} ; 

my $lastBP = 0 ;

while ( <> ) { 
	my $BP = tell ; 
	#$lastBP += 1 ; 
	my $posR = ($lastBP+1) . "-" . $BP ; #print GREEN "$lastBP-$BP" ;
	$lastBP = $BP ; 
    $_ = decode_utf8 ( $_ ) if $o{u} ;

    my $org = $_ ;
    chomp ; 
    print "$.\:$posR\t" if $o{':'} ; 
    print $_ , "\n"  if $o{1} ; 

    $_ = $org if $o{l} ;
    my @chars = split // , $_  ; 
    my @hex = map { sprintf "%02x" , ord $_ } @chars ; #  for ( @chars ) { 

    if ( $o{a} ) { 
      for ( 0 .. $#chars ) { 
        $chars [ $_ ] = '\n' if $chars[ $_ ] eq "\n" ; 
        $chars [ $_ ] = '\r' if $chars[ $_ ] eq "\r" ; 
        $chars [ $_ ] = '\t' if $chars[ $_ ] eq "\t" ; 
        my $wlen = $hex[$_] eq "feff" ? 4 : length $hex[ $_ ] > 2 ? 3 : 2  ;
        $chars [ $_ ] .= ' ' x ( $wlen  -length $chars [$_] ); # <-- - 汎用的ではない。トリッキー VisualWidth を使うべし???
      }
      do { splice @chars , $_ * $o{c} , 0 , '' for reverse 0 .. @chars / $o{c} } if $o{c}  ;
      print $o{1} ? "\t" : ''  , join ( " " , @chars ) ; 
      print "\n" ;
    }

    do { splice @hex , $_ * $o{c} , 0 , '' for reverse 0 .. @hex / $o{c} } if $o{c}  ;

    print $o{1} || $o{':'} ? "\t" : ''  , join ( " " , @hex ) ; 
    print "\n" ;
}

sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
    use FindBin qw[ $Script ] ; 
    my ($a1,$L,$opt,@out) = ($ARGV[1]//'',0,'^o(p(t(i(o(ns?)?)?)?)?)?$') ;
    open my $FH , '<' , $0 ;
    while(<$FH>){
        s/\$0/$Script/g ;
        $out[$L] .= $_ if s/^=head1\s*(.*)\n/$1/s .. s/^=cut\n//s && ++$L and $a1 =~ /$opt/i ? m/^\s+\-/ : 1 ;
    }
    close $FH ;
    print $ENV{LANG} =~ m/^ja/ ? $out[0] : $out[1] // $out[0] ;
    exit 0 ;
}


=encoding utf8

=head1

  $0

    改行で区切られたデータについて、
    16進ダンプを出力する。

オプション : 
   -: ; 入力の行番号も出力する。
   -1 ; 入力も表示する。
   -a ; ダンプに合わせて、各文字を出力する。
   -u ; 入力を utf8 として処理する。

   -c num ; 各行の先頭からnumバイトごとに出力時に、間隔を広げた表示をする。
   -l ; 改行文字も除去しないで、出力に用いる。

考えられる使い方: 
   ・ よく似た文字列を比較するとき
 

=cut

