#!/usr/bin/perl
use 5.001 ; use strict ; use warnings ; # 5.001 ; 5.011 ,5.014 で動作確認済み。 
use Getopt::Std ; getopts "b:t" , \my%o ; 
use Term::ANSIColor qw[ :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use File::Temp qw[ tempfile ] ;
use IPC::Open2 ; 

sub readIn ( ) ; 
sub writeOut ( ) ; 
sub sigint_first ( ) ; 
sub sinint_next ( ) ;

$o{b} //= 1 ; # 最初の何行に手を加えないか

# ハンドラの準備
my $pid = open2 ( * Reader , * Writer , join " " , @ARGV ) unless $o{t} ; 

my $tmpFn ; # 一時ファイルのファイル名
( *Writer, $tmpFn )  = tempfile if $o{t} ;

$SIG{INT} = \& sigint_first ; 
readIn ;
writeOut ;
unlink $tmpFn if $o{t} ;
exit 0 ;

# 関数
sub readIn ( ) { 

    while ( <STDIN> ) # <> でなくて <STDIN>を使わないと、コマンドUIが困難。
    { 
    	print $_ ; 
    	last if $. >= $o{b}  ; 
    }  

    while ( <STDIN> ) 
    { 
    	print Writer $_ ; 
    }

    close *Writer ; 

}

sub writeOut ( ) { 

	if ( $o{t} ) 
	{ 
	    open * Reader , join ' ',  'cat' , $tmpFn, '|',  @ARGV , '|'  ; 
	}

    while ( <Reader> ) 
    { 
    	print $_ ;
    }

    close * Reader ; 

    if ( $o{t} ) 
    { 
    	unlink $tmpFn ;
    }
}

sub sigint_first ( ) { 
    print STDERR CYAN "\nProcessing $.-th line, " , scalar localtime , "\n" ; 
    print STDERR CYAN "Temp file path : $tmpFn\n" if $o{t} ; 
    sleep 1 ; 
    $SIG{ INT } = \& sigint_next ;
    $SIG{ ALRM } = sub { $SIG{ INT } = \& sigint_first } ; 
    alarm 2 ; 
}

sub sigint_next ( ) { 
    writeOut ;
    $SIG{ INT } = sub { unlink $tmpFn if $o{t} ; die } ;  
    $SIG{ ALRM } = sub { $SIG{ INT } = \& sigint_first } ; 
    alarm 2 ; 
}

# ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
    use FindBin qw[ $Script ] ; 
    $ARGV[1] //= '' ;
    open my $FH , '<' , $0 ;
    while(<$FH>){
        s/\$0/$Script/g ;
        print $_ if s/^=head1// .. s/^=cut// and $ARGV[1] =~ /^o(p(t(i(o(ns?)?)?)?)?)?$/i ? m/^\s+\-/ : 1;
    }
    close $FH ;
    exit 0 ;
}

=encoding utf8 

=head1

 cat somefile | $0 -b 3 somecommand 
 $0 -b 1 sort -nk3  < somefile 

 オブション : 

   -b num : 先頭からnum行はそのまま出力する。(そして、残りを引数で指定されたコマンドに渡す.)
   -t : 内部処理に一時ファイルを使う。(-t を指定しない場合に双方向パイプ IPC::Open2 を使う。) 

  Ctrl+C を押下した場合の操作 : 

    最初の Ctrl+C で、何行まで処理できたか、一時ファイルを使っていればそのパスを表示。
    そして、1秒待ち、その後の2秒間でCtrl+Cを再び押下されたら途中までの結果を出力して1秒待つ。
    さらに2秒以内にCtrl+Cが押下されたらこのプログラム $0 は動作を停止する。
     
 開発上のメモ: 
   * 一時ファイルのパスの表示の仕方にもっと洗練が出来そう。
   * もう少し関数でラッピングしよう。
   * $o{t}の出現回数がやや多すぎかもしれない。プログラムを洗練せよ。
   * ファイルを開くときに、2本のパイプを使っている箇所がある。環境/版依存ではないか? 
   * Ctrl+C 押下時の一連の動作に、洗練が必要。
   * awk のコマンド文をうまく認識させることがやや手間がかかる。UIを工夫したい。

 テスト例: 
  seq 20 | headkeep -= -b3  "sort | gawk '{\$1*=10;print}' "


=cut
